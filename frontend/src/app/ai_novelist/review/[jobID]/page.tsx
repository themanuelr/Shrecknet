"use client";
import { useParams, useSearchParams } from "next/navigation";
import DashboardLayout from "@/app/components/DashboardLayout";
import AuthGuard from "@/app/components/auth/AuthGuard";
import { useAuth } from "@/app/components/auth/AuthProvider";
import { useEffect, useState } from "react";
import { getNovelistJob } from "@/app/lib/agentAPI";
import { useAgentById } from "@/app/lib/useAgentById";
import { useWorld } from "@/app/lib/useWorld";
import { useConcepts } from "@/app/lib/useConcept";
import CreatePageForm from "@/app/components/create_page/CreatePageForm";

export default function ReviewNovelPage() {
  const { jobID } = useParams();
  const searchParams = useSearchParams();
  const agentId = Number(searchParams.get("agent") || 0);
  const { token } = useAuth();
  const { agent } = useAgentById(agentId);
  const { world } = useWorld(agent?.world_id);
  const { concepts } = useConcepts(agent?.world_id);

  const [job, setJob] = useState<any>(null);
  const [conceptId, setConceptId] = useState<number | null>(null);

  useEffect(() => {
    if (!jobID || !token) return;
    getNovelistJob(jobID as string, token)
      .then(setJob)
      .catch(() => {});
  }, [jobID, token]);

  if (!job || job.status !== "done")
    return (
      <AuthGuard>
        <DashboardLayout>
          <div className="p-6 text-[var(--foreground)]">Generating novel...</div>
        </DashboardLayout>
      </AuthGuard>
    );

  const selectedConcept = concepts?.find(c => c.id === conceptId);

  return (
    <AuthGuard>
      <DashboardLayout>
        <div className="min-h-screen w-full text-indigo-900 px-2 sm:px-6 py-10">
          <div className="mx-auto max-w-3xl flex flex-col gap-6">
            <h1 className="text-2xl font-bold text-indigo-700 mb-4">Review Novel</h1>
            <div className="whitespace-pre-wrap border border-indigo-200 p-4 rounded bg-white">
              {job.novel}
            </div>
            <div>
              <label className="font-semibold">Add to Concept:</label>
              <select
                value={conceptId ?? ""}
                onChange={e => setConceptId(Number(e.target.value))}
                className="border border-indigo-200 rounded p-2 w-full"
              >
                <option value="">Select concept</option>
                {concepts?.map(c => (
                  <option key={c.id} value={c.id}>{c.name}</option>
                ))}
              </select>
            </div>
            {selectedConcept && world && (
              <CreatePageForm
                selectedWorld={world}
                selectedConcept={selectedConcept}
                token={token || ""}
                initialValues={{ autogenerated_content: job.novel }}
              />
            )}
          </div>
        </div>
      </DashboardLayout>
    </AuthGuard>
  );
}

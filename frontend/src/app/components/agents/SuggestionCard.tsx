// SUGGESTION CARD â€” SubStep A/B/C logic added
import { useState, useRef, useEffect } from "react";
import { Combobox } from "@headlessui/react";
export default function SuggestionCard({
    suggestion,
    index,
    concepts,
    pages,
    suggestions,
    token,
    subStep,
    onUpdate,
    onRemove,
  }) {
    const [filter, setFilter] = useState("");
    const isUpdate = suggestion.exists || suggestion.mode === "update";
    const targetPage = pages.find((p) => p.id === suggestion.target_page_id);
  
    const backgroundClass = isUpdate
      ? "bg-blue-100 border-blue-300"
      : "bg-green-100 border-green-300";
  
    const isMerged = suggestions.some((other, i) =>
      i !== index && Array.isArray(other.merge_targets) && other.merge_targets.includes(suggestion.name)
    );
  
    if (isMerged && subStep !== 'b') {
      return (
        <div className="border-2 border-gray-300 bg-gray-100 rounded-xl p-4">
          <div className="text-sm italic text-gray-500">
            This suggestion will be merged with another.
          </div>
        </div>
      );
    }
  
    return (
      <div className={`border-2 ${isMerged ? 'border-gray-300 bg-gray-100' : backgroundClass} rounded-xl p-4 space-y-3 transition-colors duration-200`}>
        <div className="flex justify-between items-center">
          <h3 className="text-lg font-bold text-[var(--primary)]">{suggestion.name}</h3>
          {subStep === 'a' && (
            <button
              className="text-red-500 hover:underline text-sm"
              onClick={() => onRemove(index)}
            >
              Remove
            </button>
          )}
        </div>
  
        <div className="text-sm whitespace-pre-line border-l-4 border-yellow-400 pl-4">
          <div dangerouslySetInnerHTML={{ __html: suggestion.autogenerated_content }} />
        </div>
        {Array.isArray(suggestion.source_pages) && suggestion.source_pages.length > 0 && (
          <div className="text-xs text-[var(--muted-foreground)]">
            From: {suggestion.source_pages.map((sp: any) => sp.name).join(', ')}
          </div>
        )}
  
        {!isMerged && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {subStep === 'c' && (
              <>
                <div>
                  <label className="block text-sm font-semibold mb-1">Action</label>
                  <select
                    value={suggestion.mode || (suggestion.exists ? "update" : "create")}
                    onChange={(e) => onUpdate(index, { mode: e.target.value, target_page_id: undefined })}
                    className="w-full px-2 py-1 rounded border border-[var(--primary)] bg-[var(--surface)] text-[var(--foreground)]"
                  >
                    <option value="create">Create New</option>
                    <option value="update">Update Existing</option>
                  </select>
                </div>
  
                <div>
                  <label className="block text-sm font-semibold mb-1">Concept</label>
                  <select
                    className="w-full px-2 py-1 rounded border border-[var(--primary)] bg-[var(--surface)] text-[var(--foreground)]"
                    value={suggestion.concept_id || ""}
                    onChange={(e) =>
                      onUpdate(index, {
                        concept_id: Number(e.target.value),
                        concept: concepts.find((c) => c.id === Number(e.target.value))?.name || "",
                      })
                    }
                  >
                    <option value="">Select...</option>
                    {concepts.map((c) => (
                      <option key={c.id} value={c.id}>
                        {c.name}
                      </option>
                    ))}
                  </select>
                </div>
              </>
            )}
  
            {subStep === 'c' && suggestion.mode === "update" && (
              <div className="col-span-2">
                <label className="block text-sm font-semibold mb-1">
                  {suggestion.exists && targetPage
                    ? `Update this Page: ${targetPage.name}`
                    : "Select Page to Update"}
                </label>
                <Combobox
                  value={suggestion.target_page_id ?? ""}
                  onChange={(val) => onUpdate(index, { target_page_id: val })}
                >
                  <div className="relative">
                    <Combobox.Input
                      className="w-full rounded border border-[var(--primary)] px-2 py-1 bg-[var(--surface)] text-[var(--foreground)]"
                      placeholder="Search page..."
                      onChange={(e) => setFilter(e.target.value)}
                      displayValue={(id) => pages.find((p) => p.id === id)?.name || ""}
                    />
                    <Combobox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-xl bg-[var(--surface)] shadow-lg z-20 border border-[var(--primary)]">
                      {pages
                        .filter(p =>
                            p.concept_id === suggestion.concept_id &&
                            p.name.toLowerCase().includes(filter.toLowerCase())
                        )
                        .map((p) => (
                          <Combobox.Option
                            key={p.id}
                            value={p.id}
                            className="px-2 py-1 cursor-pointer hover:bg-[var(--accent)]/20"
                          >
                            {p.name}
                          </Combobox.Option>
                        ))}
                    </Combobox.Options>
                  </div>
                </Combobox>
              </div>
            )}
  
            {subStep === 'b' && (
              <div className="col-span-2">
                <label className="block text-sm font-semibold mb-1">Merge With</label>
                <div className="flex flex-wrap gap-2">
                  {suggestions
                    .filter((s, i) => i !== index)
                    .map((suggOption, i) => {
                      const merged = Array.isArray(suggestion.merge_targets) && suggestion.merge_targets.includes(suggOption.name);
                      return (
                        <button
                          key={i}
                          onClick={() => {
                            const current = suggestion.merge_targets || [];
                            const already = current.includes(suggOption.name);
                            const updated = already
                              ? current.filter((n) => n !== suggOption.name)
                              : [...current, suggOption.name];
                            onUpdate(index, { merge_targets: updated });
                          }}
                          className={`px-2 py-1 rounded-full border text-xs ${
                            merged ? "bg-[var(--primary)] text-white border-[var(--primary)]" : "border-[var(--border)] text-[var(--foreground)] hover:bg-[var(--accent)]/20"
                          }`}
                        >
                          {suggOption.name}
                        </button>
                      );
                    })}
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    );
  }
  
  